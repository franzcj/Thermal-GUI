from tkinter import *
class _Frame:
    def __init__(self, root):
        self.root = root;
        self.frame = Frame(root)
        self.frame.grid(row=0, column=0, sticky='news')
        self.CheckUVar = IntVar()
        self.CheckMaterial = IntVar()
        self.CheckThickness = StringVar()
        self.CheckDensity = StringVar()
        self.CheckConductivity = StringVar()
        self.CheckSpecHeat = StringVar()

    def frameSwap(self, _frame): # swaps between frames
        _frame.frame.tkraise()

    def addSwapButtons(self): # adds buttons to swap between frames
        MainButton = Button(self.frame, text = 'Main', command=lambda:self.frameSwap(f1), anchor= N).grid(row = 1, column = 0)
        CompButton = Button(self.frame, text = 'Components', command=lambda:self.frameSwap(f2), anchor = N).grid(row = 1, column = 1)
        SurfButton = Button(self.frame, text = 'Surface', command=lambda:self.frameSwap(f3), anchor = N).grid(row = 1, column = 2)
        OrbitButton = Button(self.frame, text = 'Orbit', command=lambda:self.frameSwap(f4), anchor = N).grid(row = 1, column = 3)
        if self.frame == f1: # So this does literally nothing
            MainButton = Button(self.frame, text = 'Main', bg = 'red', command=lambda:self.frameSwap(f1), anchor= N).grid(row = 1, column = 0)
        elif self.frame == f2: # The if statement is never true
            CompButton = Button(self.frame, text = 'Components', bg = 'red', command=lambda:self.frameSwap(f2), anchor= N).grid(row = 1, column = 0)
        elif self.frame == f3:
            SurfButton = Button(self.frame, text = 'Surface', bg = 'red', command=lambda:self.frameSwap(f3), anchor= N).grid(row = 1, column = 0)
        elif self.frame == f4:
            OrbitButton = Button(self.frame, text = 'Orbit', bg = 'red', command=lambda:self.frameSwap(f4), anchor= N).grid(row = 1, column = 0)
        
    def sizeClassWidgets(self):
        Label(self.frame, text = 'Size Class:').grid(row = 2, column = 0, columnspan = 1)
        Radiobutton(self.frame, text = '1U', variable = self.CheckUVar, value=1).grid(row = 3, column = 0)
        Radiobutton(self.frame, text = '2U', variable = self.CheckUVar, value=2).grid(row = 4, column = 0)
        Radiobutton(self.frame, text = '3U', variable = self.CheckUVar, value=3).grid(row = 5, column = 0)

    def thicknessEntry(self):
        ThicknessInputLabel = Label(self.frame, text='Construction: Wall Thickness').grid(row = 2, column = 2)
        Thickness = Entry(self.frame, textvariable = self.CheckThickness).grid(row = 2, column = 3)

    def selectMaterial(self):
        Label(self.frame, text = 'Construction Material:').grid(row = 3, column = 2)
        Radiobutton(self.frame, text = 'Default A', variable = self.CheckMaterial, value=1).grid(row = 4, column = 2)
        Radiobutton(self.frame, text = 'Default B', variable = self.CheckMaterial, value=2).grid(row = 5, column = 2)
        Radiobutton(self.frame, text = 'Default C', variable = self.CheckMaterial, value=3).grid(row = 6, column = 2)

    def customActive(self):
        Density = Entry(self.frame, textvariable = self.CheckDensity, state=NORMAL).grid(row = 4, column = 4)
        Conductivity = Entry(self.frame, textvariable = self.CheckConductivity, state=NORMAL).grid(row = 5, column = 4)
        SpecificHeat = Entry(self.frame, textvariable = self.CheckSpecHeat, state=NORMAL).grid(row = 6, column = 4)
        
    def customMaterial(self):
        Radiobutton(self.frame, text = 'Custom', variable = self.CheckMaterial, value=4, command = self.customActive).grid(row = 7, column = 2)
        
        DensityLabel = Label(self.frame, text='Density:').grid(row = 4, column = 3)
        Density = Entry(self.frame, textvariable = self.CheckDensity, state=DISABLED).grid(row = 4, column = 4)

        ConductivityLabel = Label(self.frame, text='Conductivity: ').grid(row = 5, column = 3)
        Conductivity = Entry(self.frame, textvariable = self.CheckConductivity, state=DISABLED).grid(row = 5, column = 4)

        SpecHeatLabel = Label(self.frame, text='Specific Heat:').grid(row = 6, column = 3)
        SpecificHeat = Entry(self.frame, textvariable = self.CheckSpecHeat, state=DISABLED).grid(row = 6, column = 4)

    def unitCell(self):
        for i in range(0, self.CheckUVar.get()):
            LabelFrame(self, text = str(i+1) + 'U').grid(row = 0, column = 3*i, columnspan = 3)
            
    
    def __str__(self):
        if self == f1:
            return 'Main'
        elif self == f2:
            return 'Components'
        elif self == f3:
            return 'Surface'
        elif self == f4:
            return 'Orbit'
        
      
root = Tk()

f1 = _Frame(root)
f2 = _Frame(root)
f3 = _Frame(root)
f4 = _Frame(root)

for thingamabob in [f1, f2, f3, f4]: #Implements addSwapButtons for each frame
    thingamabob.addSwapButtons()

f1.sizeClassWidgets()
f1.thicknessEntry()
f1.selectMaterial()
f1.customMaterial()

f2.unitCell()

#labels added for debugging purposes, not final
Label(f1.frame, text = f1).grid(row = 0, column = 1, columnspan = 2)
Label(f2.frame, text = f2).grid(row = 0, column = 1, columnspan = 2)
Label(f3.frame, text = f3).grid(row = 0, column = 1, columnspan = 2)
Label(f4.frame, text = f4).grid(row = 0, column = 1, columnspan = 2)

f4.frameSwap(f1)
f1.root.mainloop()

